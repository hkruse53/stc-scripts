#!/usr/bin/python3

import datetime
import os.path
import sys

from dtnsense import atsci, site, daemon

class SensorReader(daemon.Reader):
    def __init__(self, cfg, sensor):
        self.cfg = cfg
        self.sensor = sensor

    def read(self):
        self.sensor.switch(atsci.TEMP)
        temp = float(self.sensor.ask("R"))

        self.sensor.switch(atsci.COND)
        self.sensor.write("T,{:.3f}".format(temp))
        cond, tds, sal, sg = (float(x) for x in self.sensor.ask("R").split(b","))

        self.sensor.switch(atsci.PH)
        self.sensor.write("T,{:.3f}".format(temp))
        ph = float(self.sensor.ask("R"))

        now = datetime.datetime.utcnow()

        record = site.Record(self.cfg, now, temp, ph, cond)
        signed = site.SignedRecord(self.cfg, record)

        return signed

class SensorDaemon(daemon.Daemon):
    RELOAD_MSG = b"R"
    WAIT_MSG = b"W"

    def handle(self, conn, msg):
        if msg == self.RELOAD_MSG:
            self.reader.cfg.reload()
            return self.ack()

        if msg == self.WAIT_MSG:
            return self.ack()

        return super().handle(conn, msg)

class Main(daemon.Main):
    def __init__(self, argv):
        super().__init__(argv, "/tmp/sensord.socket")

        self.cfg = site.Config(os.path.expanduser(self.args.conf))

    def run(self):
        if self.args.reload_config:
            return self.reload_config()

        if self.args.wait_ready:
            return self.wait_ready()

        super().run()

    def daemon(self):
        return SensorDaemon(self.sock_path, self.batcher, SensorReader(
            self.cfg, atsci.AtSciSensor()))

    def reload_config(self):
        with Client(self.sock_path) as client:
            client.send(SensorDaemon.RELOAD_MSG)
            client.wait()

    def wait_ready(self):
        with Client(self.sock_path) as client:
            client.send(SensorDaemon.WAIT_MSG)
            client.wait()

    def add_args(self, ap):
        ap.add_argument("-c", "--conf", action="store", default="~/conf/site.conf",
            help="path to configuration file (default: %(default)s)")
        ap.add_argument("-r", "--reload-config", action="store_true",
            help="reload config file")
        ap.add_argument("-w", "--wait-ready", action="store_true",
            help="wait until the daemon is configured and ready")

        super().add_args(ap)

if __name__ == "__main__":
    Main(sys.argv).run()
