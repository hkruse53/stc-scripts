#!/usr/bin/python3

import argparse
import datetime
import os.path
import sys
import time

from dtnsense import atsci, batch, site

class Reader:
    def __init__(self, cfg, sensor):
        self.cfg = cfg
        self.sensor = sensor

    def read(self):
        self.sensor.switch(atsci.TEMP)
        temp = float(self.sensor.ask("R"))

        self.sensor.switch(atsci.COND)
        self.sensor.write("T,{:.3f}".format(temp))
        cond, tds, sal, sg = (float(x) for x in self.sensor.ask("R").split(b","))

        self.sensor.switch(atsci.PH)
        self.sensor.write("T,{:.3f}".format(temp))
        ph = float(self.sensor.ask("R"))

        now = datetime.datetime.utcnow()

        record = site.Record(self.cfg, now, temp, ph, cond)
        signed = site.SignedRecord(record, self.cfg)

        return signed

def main(argv):
    ap = argparse.ArgumentParser()
    ap.add_argument("-c", "--conf", action="store", default="~/conf/site.conf",
        help="path to configuration file (default: %(default)s)")
    ap.add_argument("-d", "--delay", action="store", type=int,
        help="seconds between readings (default: only read once)")
    ap.add_argument("-z", "--gzip", action="store_true",
        help="enable gzip compression of records batches (default: no)")
    ap.add_argument("-n", "--dry-run", action="store_true",
        help="don't send over DTN2, just print on stdout (default: no)")
    ap.add_argument("-e", "--expiration", action="store", default=90 * 24 * 60 * 60,
        help="set bundle expiration in seconds (default: %(default)s)")
    ap.add_argument("-b", "--batch-size", action="store", type=int, default=96,
        help="number of bundles to put in a batch (default: %(default)s)")
    args = ap.parse_args(argv[1:])

    cfg = site.Config(os.path.expanduser(args.conf))

    if args.gzip:
        formatter = batch.GzipFormatter()
    else:
        formatter = batch.PlainFormatter()

    if args.dry_run:
        handler = batch.StdoutHandler()
    else:
        handler = batch.DTN2Handler(args.expiration)

    batcher = batch.Batcher(formatter, handler, args.batch_size)

    def read_one():
        batcher.add(str(reader.read()))

    with atsci.AtSciSensor() as sensor:
        reader = Reader(cfg, sensor)

        if args.delay is None:
            read_one()
            return

        while True:
            read_one()
            time.sleep(args.delay)

if __name__ == "__main__":
    main(sys.argv)
